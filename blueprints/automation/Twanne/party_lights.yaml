blueprint:
  name: Party Lights
  author: AntonH
  description: '**Version 2.3**


    Lights go to party mode (color loops or fade-in-and-out)


    ⚠️ **NOTE:** ⚠️

    *This automation is triggered by the status of a switch or an input_boolean entity.*

    *You can create this input_boolean by going to Settings > Devices & services >
    Helpers*

    *There you click on ''Create helper and choose ''Toggle''.*

    '
  source_url: https://gist.github.com/Twanne/fe33ab8466f9a4e94b3f8e21f745a377
  domain: automation
  input:
    party_mode_trigger:
      name: Party mode trigger
      description: "The trigger you want to use to turn the party mode on.\nThe automation
        will keep running until this is turned off.\n\nSupported entity types:\n  -
        input_boolean\n  - switch\n"
      default: []
      selector:
        entity:
          domain:
          - input_boolean
          - switch
          multiple: false
    target_lights:
      name: Target lights
      description: Which lights do you want to control?
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - light
    sync_lights:
      name: Synchronize lights
      description: 'If more than 1 target light is selected, choose if they will all
        change to the same state or if they each get their own random values.


        **NOTE:**

        *Light groups will be seen an a single entity.*

        '
      default: true
      selector:
        boolean: {}
    time_between_changes:
      name: Time between changes
      description: Change the lights setting after this duration
      default:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 0
      selector:
        duration:
          enable_millisecond: true
    transition_time:
      name: Transition time
      description: "The time it takes for the light to transition to the assigned
        value when it's triggered.\n\nWARNING!: \n  This value should not be greater
        than the time between changes\n"
      default: 0
      selector:
        number:
          min: 0.0
          max: 300.0
          step: 1.0
          unit_of_measurement: s
          mode: slider
    color_mode:
      name: Color mode
      description: "Select how the lights need to change\n  \n  1. ⬛ **NO COLOR CHANGE:**\n
        \ Don't change colors.\n\n  2. \U0001F308 **RANDOM COLOR MODE**\n  Change
        all RGB values randomly.\n\n  3. \U0001F7E5 **REDS ONLY MODE:**\n  Change
        only red value randomly.\n\n  4. \U0001F7E9 **GREENS ONLY MODE:**\n  Change
        only green value randomly.\n\n  5. \U0001F7E6 **BLUES ONLY MODE:**\n  Change
        only blue value randomly.\n\n  6. \U0001F7E6 **TEALS ONLY MODE:**\n  Change
        only teal shades randomly.\n\n  7. \U0001F338 **PINKS ONLY MODE:**\n  Change
        only pink shades randomly.\n\n  8. \U0001F7E8 **YELLOWS ONLY MODE:**\n  Change
        only yellow shades randomly.\n"
      default: no_color_change
      selector:
        select:
          mode: dropdown
          options:
          - label: NO COLOR CHANGE
            value: no_color_change
          - label: RANDOM COLOR MODE
            value: random
          - label: REDS ONLY MODE
            value: red
          - label: GREENS ONLY MODE
            value: green
          - label: BLUES ONLY MODE
            value: blue
          - label: TEALS ONLY MODE
            value: teal
          - label: PINKS ONLY MODE
            value: pink
          - label: YELLOWS ONLY MODE
            value: yellow
          multiple: false
          custom_value: false
          sort: false
    brightness_mode:
      name: Brightness mode
      description: "Select how the lights need to change\n\n  1. **RANDOM BRIGHTNESS:**\n
        \ Change the brightness randomly within a set range\n  \n  2. **FIXED BRIGHTNESS:**\n
        \ Keep the light at a user defined brightness\n"
      default: random
      selector:
        select:
          mode: dropdown
          options:
          - label: RANDOM BRIGHTNESS
            value: random
          - label: FIXED BRIGHTNESS
            value: fixed
          multiple: false
          custom_value: false
          sort: false
    min_brightness_pct:
      name: Minimum brightness (RANDOM BRIGHTNESS MODE)
      description: Don't set the brightness of the light below this value
      default: 0
      selector:
        number:
          min: 0.0
          max: 100.0
          step: 1.0
          mode: slider
          unit_of_measurement: '%'
    max_brightness_pct:
      name: Maximum brightness (RANDOM BRIGHTNESS MODE)
      description: Don't set the brightness of the light above this value
      default: 100
      selector:
        number:
          min: 0.0
          max: 100.0
          step: 1.0
          mode: slider
          unit_of_measurement: '%'
    fixed_brightness_pct:
      name: Brightness (FIXED BRIGHTNESS MODE)
      description: Keep the light at this percentage (color changes might affect this
        somewhat)
      default: 0
      selector:
        number:
          min: 0.0
          max: 100.0
          step: 1.0
          mode: slider
          unit_of_measurement: '%'
    light_effect:
      name: Effects (All modes)
      description: 'Which light effect do you want to run?


        **NOTE:**

        it''s recommended to set the time between changes long enough for the effects
        to loop at least once.

        '
      default: ''
      selector:
        text: {}
    after_party_state:
      name: After party state
      description: "What state should the lights have when the party mode is turned
        off.\n  \n  1. **NO CHANGE:**\n  Keep the lights in the state they are at
        the end of the party.\n  \n  2. **TURN OFF:**\n  Turn the lights off.\n\n
        \ 3. **RETURN TO PREVIOUS STATE:**\n  Return the lights to the state they
        were before the party began.\n\n  4. **USER DEFINED SCENE:**\n  Activate a
        scene that determines the state of the lights after the party.\n\n  5. **SCENE
        THEN OFF**\n  Set the lights to a specific setting by activating the user
        defined scene, then turn them off.\n"
      default: return_to_previous
      selector:
        select:
          mode: dropdown
          options:
          - label: NO CHANGE
            value: no_change
          - label: LIGHTS OFF
            value: lights_off
          - label: RETURN TO PREVIOUS STATE
            value: return_to_previous
          - label: USER DEFINED SCENE
            value: user_defined_scene
          - label: SCENE THEN OFF
            value: scene_then_off
          multiple: false
          custom_value: false
          sort: false
    after_party_scene:
      name: After party scene
      description: 'User defined scene that can be activated after the party mode
        is turned off.

        '
      default: []
      selector:
        entity:
          domain:
          - scene
          multiple: false
    turn_off_delay:
      name: Turn off delay
      description: 'The time to wait before the lights are turned off.


        **NOTE:**

        This option is only active when the after party state is ''LIGHTS OFF'' or
        ''SCENE THEN OFF''.

        '
      default:
        hours: 0
        minutes: 0
        seconds: 0
      selector:
        duration: {}
mode: restart
variables:
  party_mode_trigger: !input party_mode_trigger
  target_lights: !input target_lights
  sync_lights: !input sync_lights
  time_between_changes: !input time_between_changes
  transition_time: !input transition_time
  color_mode: !input color_mode
  brightness_mode: !input brightness_mode
  min_brightness_pct: !input min_brightness_pct
  max_brightness_pct: !input max_brightness_pct
  fixed_brightness_pct: !input fixed_brightness_pct
  light_effect: !input light_effect
  after_party_state: !input after_party_state
  after_party_scene: !input after_party_scene
  turn_off_delay: !input turn_off_delay
trigger:
- platform: state
  entity_id: !input party_mode_trigger
  to: 'on'
action:
- action: scene.create
  metadata: {}
  data:
    scene_id: before_state
    snapshot_entities: '{{ target_lights }}'
- repeat:
    sequence:
    - choose:
      - conditions: '{{ sync_lights is true }}'
        sequence:
        - variables:
            brightness_value: "{% if brightness_mode == \"random\" %}\n  {{ range(min_brightness_pct,
              max_brightness_pct) | random }}\n{% else %}\n  {{ fixed_brightness_pct
              }}\n{% endif %}\n"
            rgb_value: "{% if color_mode == \"random\" %}\n  {{ range(0,255) | random,
              range(0,255) | random, range(0,255) | random }}\n{% elif color_mode
              == \"red\" %}\n  {{ range(0,255) | random, 0, 0 }}\n{% elif color_mode
              == \"green\" %}\n  {{ 0, range(0,255) | random, 0 }}\n{% elif color_mode
              == \"blue\" %}\n  {{ 0, 0, range(0,255) | random }}\n{% elif color_mode
              == \"teal\" %}\n  {{ range(0,255) | random, 255, 255 }}\n{% elif color_mode
              == \"pink\" %}\n  {{ 255, range(0,255) | random, 255 }}\n{% elif color_mode
              == \"yellow\" %}\n  {{ 255, 255, range(0,255) | random }}\n{% else %}\n
              \ {{ 255, 255, 255 }}\n{% endif %}\n"
        - service: light.turn_on
          data: "{% if color_mode == \"no_color_change\" %}\n  {{ { \"transition\":
            transition_time, \"brightness_pct\": brightness_value, \"effect\": light_effect
            \ } }}\n{% else %}\n  {{ { \"transition\": transition_time, \"brightness_pct\":
            brightness_value, \"rgb_color\": rgb_value, \"effect\": light_effect  }
            }}\n{% endif %}\n"
          target:
            entity_id: '{{ target_lights }}'
      - conditions: '{{ sync_lights is false }}'
        sequence:
        - repeat:
            for_each: '{{ target_lights }}'
            sequence:
            - variables:
                brightness_value: "{% if brightness_mode == \"random\" %}\n  {{ range(min_brightness_pct,
                  max_brightness_pct) | random }}\n{% else %}\n  {{ fixed_brightness_pct
                  }}\n{% endif %}\n"
                rgb_value: "{% if color_mode == \"random\" %}\n  {{ range(0,255) |
                  random, range(0,255) | random, range(0,255) | random }}\n{% elif
                  color_mode == \"red\" %}\n  {{ range(0,255) | random, 0, 0 }}\n{%
                  elif color_mode == \"green\" %}\n  {{ 0, range(0,255) | random,
                  0 }}\n{% elif color_mode == \"blue\" %}\n  {{ 0, 0, range(0,255)
                  | random }}\n{% elif color_mode == \"teal\" %}\n  {{ range(0,255)
                  | random, 255, 255 }}\n{% elif color_mode == \"pink\" %}\n  {{ 255,
                  range(0,255) | random, 255 }}\n{% elif color_mode == \"yellow\"
                  %}\n  {{ 255, 255, range(0,255) | random }}\n{% else %}\n  {{ 255,
                  255, 255 }}\n{% endif %}\n"
            - service: light.turn_on
              data: "{% if color_mode == \"no_color_change\" %}\n  {{ { \"transition\":
                transition_time, \"brightness_pct\": brightness_value, \"effect\":
                light_effect } }}\n{% else %}\n  {{ { \"transition\": transition_time,
                \"brightness_pct\": brightness_value, \"rgb_color\": rgb_value, \"effect\":
                light_effect  } }}\n{% endif %}\n"
              target:
                entity_id: '{{ repeat.item }}'
    - delay: !input time_between_changes
    until:
    - condition: state
      entity_id: !input party_mode_trigger
      state: 'off'
- choose:
  - conditions: '{{ "lights_off" in after_party_state }}'
    sequence:
    - delay: !input turn_off_delay
    - service: light.turn_off
      target:
        entity_id: '{{ target_lights }}'
  - conditions: '{{ "return_to_previous" in after_party_state }}'
    sequence:
    - service: scene.turn_on
      metadata: {}
      target:
        entity_id: scene.before_state
  - conditions: '{{ "user_defined_scene" in after_party_state }}'
    sequence:
    - service: scene.turn_on
      metadata: {}
      target:
        entity_id: '{{ after_party_scene }}'
  - conditions: '{{ "scene_then_off" in after_party_state }}'
    sequence:
    - service: scene.turn_on
      metadata: {}
      target:
        entity_id: '{{ after_party_scene }}'
    - delay: !input turn_off_delay
    - service: light.turn_off
      target:
        entity_id: '{{ target_lights }}'
