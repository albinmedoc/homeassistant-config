[
  {
    "id": "667ec96ed52e720e",
    "type": "subflow",
    "name": "Subflow Cleanup",
    "info": "",
    "category": "function",
    "in": [
      {
        "x": 60,
        "y": 60,
        "wires": [
          {
            "id": "f6eebee5c05f2940"
          }
        ]
      }
    ],
    "out": [
      {
        "x": 300,
        "y": 60,
        "wires": [
          {
            "id": "f6eebee5c05f2940",
            "port": 0
          }
        ]
      }
    ],
    "env": [
      {
        "name": "unique_id",
        "type": "str",
        "value": "",
        "ui": {
          "label": {
            "en-US": "Unique id"
          },
          "type": "input",
          "opts": {
            "types": [
              "str"
            ]
          }
        }
      },
      {
        "name": "outputs",
        "type": "json",
        "value": "{}",
        "ui": {
          "type": "input",
          "opts": {
            "types": [
              "json"
            ]
          }
        }
      },
      {
        "name": "has_setup",
        "type": "bool",
        "value": "true",
        "ui": {
          "label": {
            "en-US": "Has setup?"
          },
          "type": "input",
          "opts": {
            "types": [
              "bool"
            ]
          }
        }
      }
    ],
    "meta": {},
    "color": "#E6E0F8",
    "icon": "font-awesome/fa-history"
  },
  {
    "id": "f6eebee5c05f2940",
    "type": "function",
    "z": "667ec96ed52e720e",
    "name": "cleanup",
    "func": "// Define outputs\n// * Key - environment variable\n// * Value - msg path to value\nconst outputs = env.get('outputs');\n\nconst buildObjWithValue = (path, value = '') => {\n    const paths = path.split('.');\n    return paths.reduceRight((acc, item, index) => ({\n        [item]: index === paths.length - 1\n            ? value\n            : acc\n    }), {});\n}\n\n// Set output variables\nconst output_values = {};\nObject.keys(outputs).forEach((output_key) => {\n    const output_value_path = outputs[output_key];\n    const output_value_location = env.get(output_key);\n    const output_value = selectn(output_value_path, msg)\n    if (output_value_location && output_value_location !== \"\") {\n        Object.assign(output_values, buildObjWithValue(output_value_location, output_value));\n    }\n});\n\nconst has_setup = env.get('has_setup');\nif (has_setup) {\n    // Load the input msg\n    const pre_msg = JSON.parse(msg[env.get('unique_id')]);\n\n    // Return the input message alongside the outputs\n    msg = Object.assign(pre_msg, output_values);\n} else {\n    msg = output_values;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [
      {
        "var": "selectn",
        "module": "selectn"
      }
    ],
    "x": 180,
    "y": 60,
    "wires": [
      []
    ]
  }
]