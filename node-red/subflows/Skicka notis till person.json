[
  {
    "id": "9577215509c764c6",
    "type": "subflow",
    "name": "Skicka notis till person",
    "info": "",
    "category": "",
    "in": [
      {
        "x": 60,
        "y": 60,
        "wires": [
          {
            "id": "c5877a07df0c2c4a"
          }
        ]
      }
    ],
    "out": [
      {
        "x": 840,
        "y": 60,
        "wires": [
          {
            "id": "d979026fdf4f7bf0",
            "port": 0
          }
        ]
      }
    ],
    "env": [
      {
        "name": "person",
        "type": "str",
        "value": "",
        "ui": {
          "label": {
            "en-US": "Person"
          },
          "type": "input",
          "opts": {
            "types": [
              "str"
            ]
          }
        }
      },
      {
        "name": "notify_data",
        "type": "str",
        "value": "",
        "ui": {
          "label": {
            "en-US": "Notify data"
          },
          "type": "input",
          "opts": {
            "types": [
              "str",
              "json"
            ]
          }
        }
      },
      {
        "name": "output_notify_service",
        "type": "str",
        "value": "",
        "ui": {
          "icon": "font-awesome/fa-sign-out",
          "label": {
            "en-US": "Notify service"
          },
          "type": "input",
          "opts": {
            "types": [
              "str"
            ]
          }
        }
      }
    ],
    "meta": {},
    "color": "#DDAA99",
    "status": {
      "x": 840,
      "y": 140,
      "wires": [
        {
          "id": "8b7d6855d09b0533",
          "port": 0
        }
      ]
    }
  },
  {
    "id": "b097d3315ee03c10",
    "type": "function",
    "z": "9577215509c764c6",
    "name": "HÃ¤mta notify service",
    "func": "const storage = 'flow_storage';\n\nconst person_entity_id = msg[storage].person;\nconst person_name = person_entity_id.split('.')[1];\n\nconst service = `mobile_app_${person_name}_iphone`;\nconst data = msg[storage].notify_data\n\nmsg['payload'] = { service, data };\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 60,
    "wires": [
      [
        "5e64db703b93910a"
      ]
    ]
  },
  {
    "id": "8b7d6855d09b0533",
    "type": "function",
    "z": "9577215509c764c6",
    "name": "Skapa status",
    "func": "const text = msg.payload.service\n\nreturn {\n    payload: {\n        fill: \"green\",\n        text\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 710,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "c5877a07df0c2c4a",
    "type": "function",
    "z": "9577215509c764c6",
    "name": "setup",
    "func": "// Define inputs\nconst env_keys = ['person', 'notify_data'];\n\n// Where should the parsed inputs be stored during the subflow\nconst storage = 'flow_storage';\n\n// Save the msg\nflow.set('input_msg', JSON.stringify(msg));\n\nmsg[storage] = {};\n\n// Check if string contains mustache\nconst containsMustache = (str) => {\n    const regex = /{{(?:(?!}}).+)}}/g;\n    return regex.test(str);\n}\n\n// Parse inputs\nenv_keys.forEach((env_key) => {\n    let env_value = env.get(env_key);\n    if (containsMustache(env_value)) {\n        env_value = env_value.replace(/(\\{{)\\s*(\\S+)\\s*(\\}})/g, \"$2\");\n        env_value = selectn(env_value, msg);\n    }\n    msg[storage][env_key] = env_value;\n});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [
      {
        "var": "selectn",
        "module": "selectn"
      }
    ],
    "x": 170,
    "y": 60,
    "wires": [
      [
        "b097d3315ee03c10"
      ]
    ]
  },
  {
    "id": "d979026fdf4f7bf0",
    "type": "function",
    "z": "9577215509c764c6",
    "name": "cleanup",
    "func": "// Define outputs\n// * Key - environment variable\n// * Value - msg path to value\nconst outputs = {\n    'output_notify_service': 'payload.service'\n};\n\nconst buildObjWithValue = (path, value = '') => {\n    const paths = path.split('.');\n    return paths.reduceRight((acc, item, index) => ({\n        [item]: index === paths.length - 1\n            ? value\n            : acc\n    }), {});\n}\n\n// Set output variables\nconst output_values = {};\nObject.keys(outputs).forEach((output_key) => {\n    const output_value_path = outputs[output_key];\n    const output_value_location = env.get(output_key);\n    const output_value = selectn(output_value_path, msg)\n    if (output_value_location && output_value_location !== \"\") {\n        Object.assign(output_values, buildObjWithValue(output_value_location, output_value));\n    }\n});\n\n// Load the msg as the input was to the subflow\nconst pre_msg = JSON.parse(flow.get('input_msg'));\n\n// Return the input message alongside the outputs\nmsg = Object.assign(pre_msg, output_values);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [
      {
        "var": "selectn",
        "module": "selectn"
      }
    ],
    "x": 740,
    "y": 60,
    "wires": [
      []
    ]
  },
  {
    "id": "5e64db703b93910a",
    "type": "api-call-service",
    "z": "9577215509c764c6",
    "name": "Skicka notis",
    "server": "e9739673.bbfed8",
    "version": 5,
    "debugenabled": false,
    "domain": "notify",
    "service": "",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 570,
    "y": 60,
    "wires": [
      [
        "d979026fdf4f7bf0",
        "8b7d6855d09b0533"
      ]
    ]
  }
]